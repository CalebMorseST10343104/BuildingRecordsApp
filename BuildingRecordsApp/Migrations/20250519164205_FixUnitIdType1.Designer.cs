// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BuildingRecordsApp.Migrations
{
    [DbContext(typeof(BuildingContext))]
    [Migration("20250519164205_FixUnitIdType1")]
    partial class FixUnitIdType1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("BuildingRecordsApp.Models.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgentCompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AgentId");

                    b.HasIndex("AgentCompanyId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.AgentCompany", b =>
                {
                    b.Property<int>("AgentCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AgentCompanyId");

                    b.ToTable("AgentCompanies");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfUnits")
                        .HasColumnType("INTEGER");

                    b.HasKey("BuildingId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.CompanyTrust", b =>
                {
                    b.Property<int>("CompanyTrustId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyTrustId");

                    b.ToTable("CompanyTrusts");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Lease", b =>
                {
                    b.Property<int>("LeaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowedPets")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeaseHolderName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonsOccupying")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignedRules")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LeaseId");

                    b.HasIndex("UnitId")
                        .IsUnique();

                    b.ToTable("Leases");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Occupancy", b =>
                {
                    b.Property<int>("OccupancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OccupantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OccupationType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("OccupancyId");

                    b.HasIndex("OccupantId");

                    b.HasIndex("UnitId");

                    b.ToTable("Occupancies");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnershipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OwnerId");

                    b.HasIndex("OwnershipId");

                    b.HasIndex("PersonId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Ownership", b =>
                {
                    b.Property<int>("OwnershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CompanyTrustId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnershipType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OwnershipId");

                    b.HasIndex("CompanyTrustId");

                    b.HasIndex("UnitId")
                        .IsUnique();

                    b.ToTable("Ownerships");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.ParkingBay", b =>
                {
                    b.Property<int>("ParkingBayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParkingBayNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParkingBayID");

                    b.HasIndex("UnitID");

                    b.ToTable("ParkingBays");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AgentCompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.HasIndex("AgentCompanyId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.StoreRoom", b =>
                {
                    b.Property<int>("StoreRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoreRoomNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StoreRoomId");

                    b.HasIndex("UnitId");

                    b.ToTable("StoreRooms");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.TagRemoteRecord", b =>
                {
                    b.Property<int>("TagRemoteRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RemotesAgent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RemotesOccupant")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RemotesOwner")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsAgent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsOccupant")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsOwner")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagRemoteRecordId");

                    b.HasIndex("UnitId")
                        .IsUnique();

                    b.ToTable("TagRemoteRecords");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AgentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AirconditioningUnits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DbInverter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Housekeeping")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LeaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OwnershipId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PetFriendly")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PrimaryContactPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SublettingAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TagRemoteRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("UnitId");

                    b.HasIndex("AgentId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("PrimaryContactPersonId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleMake")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleModel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleRegistration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VehicleId");

                    b.HasIndex("UnitId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Agent", b =>
                {
                    b.HasOne("BuildingRecordsApp.Models.AgentCompany", "AgentCompany")
                        .WithMany()
                        .HasForeignKey("AgentCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgentCompany");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Lease", b =>
                {
                    b.HasOne("BuildingRecordsApp.Models.Unit", null)
                        .WithOne("Lease")
                        .HasForeignKey("BuildingRecordsApp.Models.Lease", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Occupancy", b =>
                {
                    b.HasOne("BuildingRecordsApp.Models.Person", "Occupant")
                        .WithMany()
                        .HasForeignKey("OccupantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildingRecordsApp.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Occupant");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Owner", b =>
                {
                    b.HasOne("BuildingRecordsApp.Models.Ownership", "Ownership")
                        .WithMany()
                        .HasForeignKey("OwnershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildingRecordsApp.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ownership");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Ownership", b =>
                {
                    b.HasOne("BuildingRecordsApp.Models.CompanyTrust", null)
                        .WithMany("Ownerships")
                        .HasForeignKey("CompanyTrustId");

                    b.HasOne("BuildingRecordsApp.Models.Unit", "Unit")
                        .WithOne("Ownership")
                        .HasForeignKey("BuildingRecordsApp.Models.Ownership", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.ParkingBay", b =>
                {
                    b.HasOne("BuildingRecordsApp.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Person", b =>
                {
                    b.HasOne("BuildingRecordsApp.Models.AgentCompany", null)
                        .WithMany("Agents")
                        .HasForeignKey("AgentCompanyId");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.StoreRoom", b =>
                {
                    b.HasOne("BuildingRecordsApp.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.TagRemoteRecord", b =>
                {
                    b.HasOne("BuildingRecordsApp.Models.Unit", null)
                        .WithOne("TagRemoteRecord")
                        .HasForeignKey("BuildingRecordsApp.Models.TagRemoteRecord", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Unit", b =>
                {
                    b.HasOne("BuildingRecordsApp.Models.Agent", "Agent")
                        .WithMany("Units")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BuildingRecordsApp.Models.Building", "Building")
                        .WithMany("Units")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BuildingRecordsApp.Models.Person", "PrimaryContactPerson")
                        .WithMany()
                        .HasForeignKey("PrimaryContactPersonId");

                    b.Navigation("Agent");

                    b.Navigation("Building");

                    b.Navigation("PrimaryContactPerson");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Vehicle", b =>
                {
                    b.HasOne("BuildingRecordsApp.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Agent", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.AgentCompany", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Building", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.CompanyTrust", b =>
                {
                    b.Navigation("Ownerships");
                });

            modelBuilder.Entity("BuildingRecordsApp.Models.Unit", b =>
                {
                    b.Navigation("Lease");

                    b.Navigation("Ownership");

                    b.Navigation("TagRemoteRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
